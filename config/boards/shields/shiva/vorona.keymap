#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#include "zmk-helpers/helper.h"

// Source unicode-chars for desired languages
#include "zmk-helpers/unicode-chars/german.dtsi"

#define QWERTY 0
#define COLEMAK 1
#define NUM 2
#define FUNC 3
#define NAV 4
#define BT 5

&lt { flavor = "balanced"; tapping-term-ms = <200>; quick-tap-ms = <200>; require-prior-idle-ms = <200>; };
&sk { release-after-ms = <800>; quick-release; };
&sl { ignore-modifiers; release-after-ms = <10000>; };

// morphs
ZMK_BEHAVIOR(smart_shft, mod_morph, bindings = <&sk RSFT>, <&kp CAPS>; mods = <(MOD_RSFT)>;)
ZMK_BEHAVIOR(slsh_excl, mod_morph, bindings = <&kp SLASH>, <&kp EXCL>; mods = <(MOD_RSFT)>;)

// parentheses, braces, brackets, chevrons morphs
ZMK_BEHAVIOR(lparchev, mod_morph, bindings = <&kp LPAR>, <&kp LT>; mods = <(MOD_RSFT)>;)
ZMK_BEHAVIOR(rparchev, mod_morph, bindings = <&kp RPAR>, <&kp GT>; mods = <(MOD_RSFT)>;)
ZMK_BEHAVIOR(lbrkbrc, mod_morph, bindings = <&kp LBKT>, <&kp LBRC>; mods = <(MOD_RSFT)>;)
ZMK_BEHAVIOR(rbrkbrc, mod_morph, bindings = <&kp RBKT>, <&kp RBRC>; mods = <(MOD_RSFT)>;)


/ {

    behaviors {
        num_dance: num_dance_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <150>;
            quick-tap-ms = <200>;
            bindings = <&tog>, <&sl>;
        };
    };

    macros {
        pinp: pinp {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap &kp PRCNT &kp I &kp N &kp PRCNT>
                ;
        };
        nequal: nequal {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap &kp EXCL &kp EQUAL>
                ;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        QWERTY {
            label = "qwerty";
            bindings = <
    &kp RBKT         &kp Q     &kp W        &kp E        &kp R      &kp T     &kp Y     &kp U    &kp I      &kp O     &kp P       &kp LBKT
    &lt NAV GRAVE    &kp A     &kp S        &kp D        &kp F      &kp G     &kp H     &kp J    &kp K      &kp L     &kp SEMI    &kp SQT
    &kp LSFT         &kp Z     &kp X        &kp C        &kp V      &kp B     &kp N     &kp M    &kp COMMA  &kp DOT   &slsh_excl
    &kp LCTRL                  &kp LGUI     &kp LALT                &kp SPACE           &smart_shft         &kp RALT  &kp K_CANCEL
            >;
        };
        COLEMAK{
            label = "colemak";
            bindings = <
    &kp RBKT         &kp Q     &kp W     &kp F        &kp P      &kp B     &kp J     &kp L     &kp U     &kp Y      &kp SEMI    &kp LBKT
    &lt NAV GRAVE    &kp A     &kp R     &kp S        &kp T      &kp G     &kp M     &kp N     &kp E     &kp I      &kp O       &kp SQT
    &kp LSFT         &kp Z     &kp X     &kp C        &kp D      &kp V     &kp K     &kp H     &kp COMMA &kp DOT    &slsh_excl
    &kp LCTRL                  &kp LGUI  &kp LALT                &kp SPACE           &smart_shft         &kp RALT   &kp K_CANCEL
            >;
        };
        NUM{
            label = "numbers";
            bindings = <
    &trans       &trans    &kp N7     &kp N8      &kp N9     &trans    &trans    &kp KP_N7 &kp KP_N8 &kp KP_N9  &trans      &trans
    &trans       &kp N0    &kp N4     &kp N5      &kp N6     &trans    &trans    &kp KP_N4 &kp KP_N5 &kp KP_N6  &kp KP_N0   &trans
    &trans       &trans    &kp N1     &kp N2      &kp N3     &trans    &trans    &kp KP_N1 &kp KP_N2 &kp KP_N3  &trans 
    &kp LCTRL              &kp LGUI   &kp LALT               &kp SPACE           &trans              &kp RALT   &tog NUM
            >;
        };
        FUNC{
            label = "func";
            bindings = <
    &kp F12      &kp F1    &kp F2     &kp F3      &kp F4     &kp F5    &kp F6    &kp F7    &kp F8    &kp F9     &kp F10    &kp F11
    &trans       &trans    &trans     &trans      &trans     &trans    &trans    &trans    &trans    &trans     &trans     &trans
    &trans       &trans    &trans     &trans      &trans     &trans    &trans    &trans    &trans    &trans     &trans
    &kp LCTRL              &kp LGUI   &kp LALT               &kp SPACE           &trans              &kp RALT   &trans
            >;
        };
        NAV{
            label = "nav";
            bindings = <
    &none        &none     &kp LA(F4) &none      &kp LC(ENTER)  &none     &kp HOME             &kp LC(LEFT)     &kp LC(RIGHT)     &kp END               &none    &none
    &none        &none     &none      &none      &none          &none     &kp LEFT             &kp DOWN         &kp UP            &kp RIGHT             &none    &none
    &trans       &none     &none      &none      &none          &none     &kp LS(HOME)         &kp LC(LS(LEFT)) &kp LC(LS(RIGHT)) &kp LS(END)           &none
    &kp LCTRL              &kp LGUI   &kp LALT                  &kp SPACE                      &trans                             &kp RALT              &tog NAV
            >;
        };
        BT {
            label = "ble";
            bindings = <
    &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4 &none     &none    &none     &none     &none    &none   &bt BT_CLR
    &none        &none        &none        &none        &none        &none     &none    &none     &none     &none    &none   &none
    &none        &none        &none        &none        &none        &none     &none    &none     &none     &none    &none
    &none                     &none        &none                     &none              &none               &none    &none
            >;
        };
    };
};

/*                KEY POSITIONS
  ╭───────────────────────────────────────────────╮
  │ 0   1   2   3   4   5   6   7   8   9   10  11│
  │ 12  13  14  15  16  17  18  19  20  21  22  23│
  │   24  25  26  27  28  29  30  31  32  33  34  │
  │  35  36  37      38      39     40  41        │
  ╰───────────────────────────────────────────────╯
 */
#undef COMBO_HOOK
#define COMBO_HOOK require-prior-idle-ms = <200>;

#define COMBO_TERM_COMMON 40

/* symbol combos */

/* Horizontal combos - left hand */
ZMK_COMBO(esc,      &kp ESC,          2 3,          ALL, COMBO_TERM_COMMON)
ZMK_COMBO(enter,    &kp ENTER,        3 4,          ALL, COMBO_TERM_COMMON)
ZMK_COMBO(tab,      &kp TAB,        14 15,          ALL, COMBO_TERM_COMMON)
ZMK_COMBO(cut,      &kp LC(X),      26 28,          ALL, COMBO_TERM_COMMON)
ZMK_COMBO(copy,     &kp LC(INS),    26 27,          ALL, COMBO_TERM_COMMON)
ZMK_COMBO(paste,    &kp LS(INS),    27 28,          ALL, COMBO_TERM_COMMON)

/* Horizontal combos - right hand */
ZMK_COMBO(bspc,     &kp BSPC,         7 8,          ALL, COMBO_TERM_COMMON)
ZMK_COMBO(del,      &kp DEL,          8 9,          ALL, COMBO_TERM_COMMON)
ZMK_COMBO(com_lpc,  &lparchev,      19 20,          ALL, COMBO_TERM_COMMON)
ZMK_COMBO(com_rpc,  &rparchev,      20 21,          ALL, COMBO_TERM_COMMON)
ZMK_COMBO(com_lbb,  &lbrkbrc,       31 32,          ALL, COMBO_TERM_COMMON)
ZMK_COMBO(com_rbb,  &rbrkbrc,       32 33,          ALL, COMBO_TERM_COMMON)


/* Vertical combos - left hand */
ZMK_COMBO(at,       &kp AT,          2 14,          ALL, COMBO_TERM_COMMON)
ZMK_COMBO(hash,     &kp HASH,        3 15,          ALL, COMBO_TERM_COMMON)
ZMK_COMBO(dllr,     &kp DLLR,        4 16,          ALL, COMBO_TERM_COMMON)
ZMK_COMBO(prcnt,    &kp PRCNT,       5 17,          ALL, COMBO_TERM_COMMON)

ZMK_COMBO(grave,    &kp GRAVE,      14 25,          ALL, COMBO_TERM_COMMON)
ZMK_COMBO(bslh,     &kp BSLH,       15 26,          ALL, COMBO_TERM_COMMON)
ZMK_COMBO(equal,    &kp EQUAL,      16 27,          ALL, COMBO_TERM_COMMON)
ZMK_COMBO(tilde,    &kp TILDE,      17 28,          ALL, COMBO_TERM_COMMON)

/* Vertical combos - right hand */
ZMK_COMBO(caret,    &kp CARET,       6 18,          ALL, COMBO_TERM_COMMON)
ZMK_COMBO(plus,     &kp PLUS,        7 19,          ALL, COMBO_TERM_COMMON)
ZMK_COMBO(star,     &kp STAR,        8 20,          ALL, COMBO_TERM_COMMON)
ZMK_COMBO(amps,     &kp AMPS,        9 21,          ALL, COMBO_TERM_COMMON)

ZMK_COMBO(under,    &kp UNDER,      18 30,          ALL, COMBO_TERM_COMMON)
ZMK_COMBO(minus,    &kp MINUS,      19 31,          ALL, COMBO_TERM_COMMON)
ZMK_COMBO(fslh,     &kp FSLH,       20 32,          ALL, COMBO_TERM_COMMON)
ZMK_COMBO(pipe,     &kp PIPE,       21 33,          ALL, COMBO_TERM_COMMON)

/* special combos */
ZMK_COMBO(rpipe,     &kp LC(LS(M)),     31 20 21,      ALL, COMBO_TERM_COMMON)
ZMK_COMBO(requal,    &kp LA(MINUS),     19  8  9,      ALL, COMBO_TERM_COMMON)
ZMK_COMBO(boot,        &bootloader,        12 34,       BT, COMBO_TERM_COMMON)
ZMK_COMBO(nequal,          &nequal,        15 27,      ALL, COMBO_TERM_COMMON)
ZMK_COMBO(pinp,              &pinp,     14 15 27,      ALL, COMBO_TERM_COMMON)

/* layer combos */
ZMK_COMBO(toqwer,   &to QWERTY,         1 4 7 10, COLEMAK, COMBO_TERM_COMMON)
ZMK_COMBO(tocole,   &to COLEMAK,        1 4 7 10,  QWERTY, COMBO_TERM_COMMON)
ZMK_COMBO(tognum,   &num_dance NUM NUM,    14 16,     ALL, COMBO_TERM_COMMON)
ZMK_COMBO(slfunc,   &sl FUNC,                2 4,     ALL, COMBO_TERM_COMMON)
ZMK_COMBO(tognav,   &tog NAV,              13 16,     ALL, COMBO_TERM_COMMON)
ZMK_COMBO(slble,    &sl BT,          13 16 19 22,     ALL, COMBO_TERM_COMMON)


/* TODO: copy PUR plus caps/caps word, ctrl+S to work on all layers*/
